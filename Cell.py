class Cell:
    """
    Represents a cell in the simulation map, with various attributes that define its environment.
    Each cell has an element (e.g., sea, forest, land, city, glacier), and the attributes associated 
    with that element (e.g., temperature, pollution, wind speed, etc.)
    """
    
    ELEMENT_ATTRIBUTES = {
        'sea': {
            'temp': 15, 'pollution': 0.12, 'wind_direction': 'E', 'wind_speed': 0.3, 
            'gen_pollution': 0, 'absorb_pollution': 0, 'clouds': ''
        },
        'forest': {
            'temp': 20, 'pollution': 0.06, 'wind_direction': 'N', 'wind_speed': 0.1, 
            'gen_pollution': 0, 'absorb_pollution': 0.02, 'clouds': ''
        },
        'land': {
            'temp': 22, 'pollution': 0.09, 'wind_direction': 'S', 'wind_speed': 0.4, 
            'gen_pollution': 0, 'absorb_pollution': 0, 'clouds': ''
        },
        'city': {
            'temp': 27, 'pollution': 0.6, 'wind_direction': 'E', 'wind_speed': 0.2, 
            'gen_pollution': 0.1, 'absorb_pollution': 0, 'clouds': ''
        },
        'glacier': {
            'temp': -20, 'pollution': 0.12, 'wind_direction': 'W', 'wind_speed': 0.5, 
            'gen_pollution': 0, 'absorb_pollution': 0, 'clouds': ''
        },
    }

    def __init__(self, x, y, element):
        """
        Initializes a new Cell instance at a specific (x, y) position with a given element type.

        Args:
        x (int): The x-coordinate (horizontal position) of the cell on the map.
        y (int): The y-coordinate (vertical position) of the cell on the map.
        element (str): The type of the cell, which determines its properties (e.g., 'sea', 'forest').
        """
        self.x = x  
        self.y = y
        self.element = element  
        
        # Initialize the attributes of the cell based on its element type
        self.attributes_val = self.ELEMENT_ATTRIBUTES.get(element, {}).copy()


    # Getter and Setter for 'temp' (temperature)   
    def get_element(self):
        return self.element
    
    def set_element(self, element):
        self.element = element
    # Getter and Setter for 'temp' (temperature)
    def get_temp(self):
        """Returns the temperature of the cell."""
        return self.attributes_val['temp']

    def set_temp(self, new_temp):
        """Sets a new temperature for the cell."""
        self.attributes_val['temp'] = new_temp

    # Getter and Setter for 'pollution' (pollution level)
    def get_pollution(self):
        """Returns the pollution level of the cell."""
        return self.attributes_val['pollution']

    def set_pollution(self, new_pollution):
        """Sets a new pollution level for the cell."""
        self.attributes_val['pollution'] = new_pollution

    # Getter and Setter for 'wind_direction' (direction of the wind)
    def get_wind_direction(self):
        """Returns the wind direction for the cell."""
        return self.attributes_val['wind_direction']

    def set_wind_direction(self, new_direction):
        """Sets a new wind direction for the cell."""
        self.attributes_val['wind_direction'] = new_direction

    # Getter and Setter for 'wind_speed' (wind speed)
    def get_wind_speed(self):
        """Returns the wind speed for the cell."""
        return self.attributes_val['wind_speed']

    def set_wind_speed(self, new_speed):
        """Sets a new wind speed for the cell."""
        self.attributes_val['wind_speed'] = new_speed

    # Getter and Setter for 'gen_pollution' (pollution generated by the cell)
    def get_gen_pollution(self):
        """Returns the amount of pollution generated by the cell."""
        return self.attributes_val['gen_pollution']

    def set_gen_pollution(self, new_gen_pollution):
        """Sets a new value for the pollution generated by the cell."""
        self.attributes_val['gen_pollution'] = new_gen_pollution

    # Getter and Setter for 'absorb_pollution' (pollution absorbed by the cell)
    def get_absorb_pollution(self):
        """Returns the amount of pollution absorbed by the cell."""
        return self.attributes_val['absorb_pollution']

    def set_absorb_pollution(self, new_absorb_pollution):
        """Sets a new value for the pollution absorbed by the cell."""
        self.attributes_val['absorb_pollution'] = new_absorb_pollution

    # Getter and Setter for 'clouds' (cloud state of the cell)
    def get_cloud(self):
        """Returns the current cloud state of the cell (e.g., '', 'cloud', 'rain')."""
        return self.attributes_val['clouds']
    
    def set_cloud(self, cloud_state):
        """Sets a new cloud state for the cell (e.g., '', 'cloud', 'rain')."""
        self.attributes_val['clouds'] = cloud_state
